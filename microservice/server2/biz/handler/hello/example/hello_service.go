// Code generated by hertz generator.

package example

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"hertz-demo/common/model"
	server1Example "hertz-demo/microservice/server1/biz/model/hello/example"
	server1Example2 "hertz-demo/microservice/server1/biz/model/hello2/example"
	"hertz-demo/microservice/server2/biz/model/hello/example"
	"hertz-demo/microservice/server2/g"
)

// HelloMethod .
// @router /hello [GET]
func HelloMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req example.HelloReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	var result model.Response[server1Example.HelloResp]
	if err = g.HertzClient.Get(ctx, "server1", "/hello", &result); err != nil {
		hlog.Error(err)
	}

	var result2 model.Response[server1Example2.TestPostResp]
	if err = g.HertzClient.RequestWithJsonData(ctx, "server1", "/test-post", consts.MethodPost, &server1Example2.TestPostReq{Name: "zze2"}, &result2); err != nil {
		hlog.Error(err)
	}
	hlog.Info(result2.Data.Msg)
	resp := new(example.HelloResp)
	resp.RespBody = fmt.Sprintf("from server1: %s", result.Data.RespBody)

	//c.JSON(200, resp)
	result.C = c
	result.JsonSelf()
}
